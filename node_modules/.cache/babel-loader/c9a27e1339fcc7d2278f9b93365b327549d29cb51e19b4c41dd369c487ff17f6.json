{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useWallet.js\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nconst useWallet = () => {\n  _s();\n  const [walletAddress, setWalletAddress] = useState('');\n  const [balance, setBalance] = useState(0);\n  const [provider, setProvider] = useState(null);\n  useEffect(() => {\n    const checkIfWalletIsConnected = async () => {\n      if (window.ethereum) {\n        const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n        setProvider(web3Provider);\n        const accounts = await web3Provider.listAccounts();\n        if (accounts.length > 0) {\n          setWalletAddress(accounts[0]);\n          fetchBalance(accounts[0], web3Provider);\n        }\n      } else {\n        console.log(\"MetaMask is not installed!\");\n      }\n    };\n    checkIfWalletIsConnected();\n  }, []);\n  const fetchBalance = async (address, web3Provider) => {\n    if (web3Provider) {\n      const balanceInWei = await web3Provider.getBalance(address);\n      const balanceInEth = ethers.utils.formatEther(balanceInWei);\n      setBalance(balanceInEth);\n    }\n  };\n  const connectWallet = async () => {\n    if (provider) {\n      const accounts = await provider.send(\"eth_requestAccounts\", []);\n      setWalletAddress(accounts[0]);\n      fetchBalance(accounts[0], provider);\n    }\n  };\n  return {\n    walletAddress,\n    balance,\n    connectWallet\n  };\n};\n_s(useWallet, \"KfB7ySiNQ9OmofuVcQfc5INyTuA=\");\nexport default useWallet;","map":{"version":3,"names":["useEffect","useState","ethers","useWallet","_s","walletAddress","setWalletAddress","balance","setBalance","provider","setProvider","checkIfWalletIsConnected","window","ethereum","web3Provider","providers","Web3Provider","accounts","listAccounts","length","fetchBalance","console","log","address","balanceInWei","getBalance","balanceInEth","utils","formatEther","connectWallet","send"],"sources":["C:/project/eWalletHub/src/hooks/useWallet.js"],"sourcesContent":["// src/hooks/useWallet.js\r\nimport { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\n\r\nconst useWallet = () => {\r\n    const [walletAddress, setWalletAddress] = useState('');\r\n    const [balance, setBalance] = useState(0);\r\n    const [provider, setProvider] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const checkIfWalletIsConnected = async () => {\r\n            if (window.ethereum) {\r\n                const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                setProvider(web3Provider);\r\n\r\n                const accounts = await web3Provider.listAccounts();\r\n                if (accounts.length > 0) {\r\n                    setWalletAddress(accounts[0]);\r\n                    fetchBalance(accounts[0], web3Provider);\r\n                }\r\n            } else {\r\n                console.log(\"MetaMask is not installed!\");\r\n            }\r\n        };\r\n\r\n        checkIfWalletIsConnected();\r\n    }, []);\r\n\r\n    const fetchBalance = async (address, web3Provider) => {\r\n        if (web3Provider) {\r\n            const balanceInWei = await web3Provider.getBalance(address);\r\n            const balanceInEth = ethers.utils.formatEther(balanceInWei);\r\n            setBalance(balanceInEth);\r\n        }\r\n    };\r\n\r\n    const connectWallet = async () => {\r\n        if (provider) {\r\n            const accounts = await provider.send(\"eth_requestAccounts\", []);\r\n            setWalletAddress(accounts[0]);\r\n            fetchBalance(accounts[0], provider);\r\n        }\r\n    };\r\n\r\n    return { walletAddress, balance, connectWallet };\r\n};\r\n\r\nexport default useWallet;"],"mappings":";AAAA;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,MAAM,QAAQ,QAAQ;AAE/B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACzC,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACZ,MAAMW,wBAAwB,GAAG,MAAAA,CAAA,KAAY;MACzC,IAAIC,MAAM,CAACC,QAAQ,EAAE;QACjB,MAAMC,YAAY,GAAG,IAAIZ,MAAM,CAACa,SAAS,CAACC,YAAY,CAACJ,MAAM,CAACC,QAAQ,CAAC;QACvEH,WAAW,CAACI,YAAY,CAAC;QAEzB,MAAMG,QAAQ,GAAG,MAAMH,YAAY,CAACI,YAAY,CAAC,CAAC;QAClD,IAAID,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAE;UACrBb,gBAAgB,CAACW,QAAQ,CAAC,CAAC,CAAC,CAAC;UAC7BG,YAAY,CAACH,QAAQ,CAAC,CAAC,CAAC,EAAEH,YAAY,CAAC;QAC3C;MACJ,CAAC,MAAM;QACHO,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MAC7C;IACJ,CAAC;IAEDX,wBAAwB,CAAC,CAAC;EAC9B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,YAAY,GAAG,MAAAA,CAAOG,OAAO,EAAET,YAAY,KAAK;IAClD,IAAIA,YAAY,EAAE;MACd,MAAMU,YAAY,GAAG,MAAMV,YAAY,CAACW,UAAU,CAACF,OAAO,CAAC;MAC3D,MAAMG,YAAY,GAAGxB,MAAM,CAACyB,KAAK,CAACC,WAAW,CAACJ,YAAY,CAAC;MAC3DhB,UAAU,CAACkB,YAAY,CAAC;IAC5B;EACJ,CAAC;EAED,MAAMG,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAIpB,QAAQ,EAAE;MACV,MAAMQ,QAAQ,GAAG,MAAMR,QAAQ,CAACqB,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;MAC/DxB,gBAAgB,CAACW,QAAQ,CAAC,CAAC,CAAC,CAAC;MAC7BG,YAAY,CAACH,QAAQ,CAAC,CAAC,CAAC,EAAER,QAAQ,CAAC;IACvC;EACJ,CAAC;EAED,OAAO;IAAEJ,aAAa;IAAEE,OAAO;IAAEsB;EAAc,CAAC;AACpD,CAAC;AAACzB,EAAA,CAzCID,SAAS;AA2Cf,eAAeA,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}